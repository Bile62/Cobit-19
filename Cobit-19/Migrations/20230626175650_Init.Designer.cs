// <auto-generated />
using System;
using Cobit_19.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cobit_19.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230626175650_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cobit_19.Models.AnswerModel", b =>
                {
                    b.Property<int>("AuditID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("Answer")
                        .HasColumnType("int");

                    b.HasKey("AuditID", "QuestionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AuditID = 1,
                            QuestionID = 1,
                            Answer = 1
                        });
                });

            modelBuilder.Entity("Cobit_19.Models.AuditModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("FocusAreaID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FocusAreaID");

                    b.ToTable("Audits");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateCreated = new DateTime(2009, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FocusAreaID = 1,
                            Name = "Audit 1",
                            Status = 0,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("Cobit_19.Models.AuditScopeModel", b =>
                {
                    b.Property<int>("AuditID")
                        .HasColumnType("int");

                    b.Property<int>("ObjectiveID")
                        .HasColumnType("int");

                    b.Property<int>("AuditsID")
                        .HasColumnType("int");

                    b.Property<int>("ObjectivesID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AuditID", "ObjectiveID");

                    b.HasIndex("AuditsID");

                    b.HasIndex("ObjectivesID");

                    b.ToTable("AuditScopes");
                });

            modelBuilder.Entity("Cobit_19.Models.DesignFactorModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FocusAreaID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FocusAreaID");

                    b.ToTable("DesignFactors");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Ensure Governance Framework Setting and Maintenance",
                            FocusAreaID = 1,
                            Name = "EDM01"
                        });
                });

            modelBuilder.Entity("Cobit_19.Models.FocusAreaModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("FocusAreas");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateCreated = new DateTime(2009, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "General Core Model",
                            Name = "Cobit Core Model",
                            UserID = 0
                        });
                });

            modelBuilder.Entity("Cobit_19.Models.MapModel", b =>
                {
                    b.Property<int>("ObjectiveID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("ObjectiveID", "QuestionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Cobit_19.Models.ObjectiveModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Objectives");
                });

            modelBuilder.Entity("Cobit_19.Models.QuestionModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("DefaultAnswer")
                        .HasColumnType("int");

                    b.Property<int>("DesignFactorID")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DesignFactorID");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DefaultAnswer = 1,
                            DesignFactorID = 1,
                            Question = "Is there a governance framework that includes the organisational structure, as well as the assignment of authorities and responsibilities for executing governance activities and monitoring their adequacy and effectiveness?"
                        });
                });

            modelBuilder.Entity("Cobit_19.Models.AnswerModel", b =>
                {
                    b.HasOne("Cobit_19.Models.AuditModel", "Audit")
                        .WithMany("Answers")
                        .HasForeignKey("AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cobit_19.Models.QuestionModel", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Cobit_19.Models.AuditModel", b =>
                {
                    b.HasOne("Cobit_19.Models.FocusAreaModel", "FocusAreas")
                        .WithMany("Audits")
                        .HasForeignKey("FocusAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusAreas");
                });

            modelBuilder.Entity("Cobit_19.Models.AuditScopeModel", b =>
                {
                    b.HasOne("Cobit_19.Models.AuditModel", "Audits")
                        .WithMany("AuditScopes")
                        .HasForeignKey("AuditsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cobit_19.Models.ObjectiveModel", "Objectives")
                        .WithMany("AuditScopes")
                        .HasForeignKey("ObjectivesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audits");

                    b.Navigation("Objectives");
                });

            modelBuilder.Entity("Cobit_19.Models.DesignFactorModel", b =>
                {
                    b.HasOne("Cobit_19.Models.FocusAreaModel", "FocusArea")
                        .WithMany("DesignFactors")
                        .HasForeignKey("FocusAreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusArea");
                });

            modelBuilder.Entity("Cobit_19.Models.MapModel", b =>
                {
                    b.HasOne("Cobit_19.Models.ObjectiveModel", "Objective")
                        .WithMany("Maps")
                        .HasForeignKey("ObjectiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cobit_19.Models.QuestionModel", "Question")
                        .WithMany("Maps")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Objective");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Cobit_19.Models.QuestionModel", b =>
                {
                    b.HasOne("Cobit_19.Models.DesignFactorModel", "DesignFactor")
                        .WithMany("Questions")
                        .HasForeignKey("DesignFactorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DesignFactor");
                });

            modelBuilder.Entity("Cobit_19.Models.AuditModel", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("AuditScopes");
                });

            modelBuilder.Entity("Cobit_19.Models.DesignFactorModel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Cobit_19.Models.FocusAreaModel", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("DesignFactors");
                });

            modelBuilder.Entity("Cobit_19.Models.ObjectiveModel", b =>
                {
                    b.Navigation("AuditScopes");

                    b.Navigation("Maps");
                });

            modelBuilder.Entity("Cobit_19.Models.QuestionModel", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Maps");
                });
#pragma warning restore 612, 618
        }
    }
}
